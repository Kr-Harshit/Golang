// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: currency.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Currencies is the enum which represents the allowed currencies for API
type Currencies int32

const (
	Currencies_USD Currencies = 0
	Currencies_ERN Currencies = 1
	Currencies_BRL Currencies = 2
	Currencies_AOA Currencies = 3
	Currencies_NPR Currencies = 4
	Currencies_MWK Currencies = 5
	Currencies_SYP Currencies = 6
	Currencies_MUR Currencies = 7
	Currencies_SLL Currencies = 8
	Currencies_SZL Currencies = 9
	Currencies_SAR Currencies = 10
	Currencies_PLN Currencies = 11
	Currencies_KZT Currencies = 12
	Currencies_AZN Currencies = 13
	Currencies_URY Currencies = 14
	Currencies_BIF Currencies = 15
	Currencies_BYR Currencies = 16
	Currencies_UZS Currencies = 17
	Currencies_KHR Currencies = 18
	Currencies_TMT Currencies = 19
	Currencies_PAB Currencies = 20
	Currencies_GEL Currencies = 21
	Currencies_EUR Currencies = 22
	Currencies_ILS Currencies = 23
	Currencies_GTQ Currencies = 24
	Currencies_SOS Currencies = 25
	Currencies_ETH Currencies = 26
	Currencies_DKK Currencies = 27
	Currencies_RSD Currencies = 28
	Currencies_LSL Currencies = 29
	Currencies_AMD Currencies = 30
	Currencies_XPF Currencies = 31
	Currencies_GBP Currencies = 32
	Currencies_SGD Currencies = 33
	Currencies_MAD Currencies = 34
	Currencies_BHD Currencies = 35
	Currencies_BND Currencies = 36
	Currencies_GMD Currencies = 37
	Currencies_IRR Currencies = 38
	Currencies_LBP Currencies = 39
	Currencies_YER Currencies = 40
	Currencies_DJF Currencies = 41
	Currencies_OMR Currencies = 42
	Currencies_DOP Currencies = 43
	Currencies_ETB Currencies = 44
	Currencies_CNY Currencies = 45
	Currencies_INR Currencies = 46
	Currencies_NOK Currencies = 47
	Currencies_BDT Currencies = 48
	Currencies_IDR Currencies = 49
	Currencies_THB Currencies = 50
	Currencies_EGP Currencies = 51
	Currencies_CDF Currencies = 52
	Currencies_UGX Currencies = 53
	Currencies_AFN Currencies = 54
	Currencies_MDL Currencies = 55
	Currencies_PKR Currencies = 56
	Currencies_HUF Currencies = 57
	Currencies_UAH Currencies = 58
	Currencies_LKR Currencies = 59
	Currencies_LTC Currencies = 60
	Currencies_SSP Currencies = 61
	Currencies_PYG Currencies = 62
	Currencies_MGA Currencies = 63
	Currencies_RWF Currencies = 64
	Currencies_KYD Currencies = 65
	Currencies_CLP Currencies = 66
	Currencies_RON Currencies = 67
	Currencies_MMK Currencies = 68
	Currencies_TND Currencies = 69
	Currencies_XRP Currencies = 70
	Currencies_ZAR Currencies = 71
	Currencies_BOB Currencies = 72
	Currencies_KGS Currencies = 73
	Currencies_XOF Currencies = 74
	Currencies_NZD Currencies = 75
	Currencies_CHF Currencies = 76
	Currencies_CAD Currencies = 77
	Currencies_IQD Currencies = 78
	Currencies_CUC Currencies = 79
	Currencies_KMF Currencies = 80
	Currencies_COP Currencies = 81
	Currencies_BWP Currencies = 82
	Currencies_PGK Currencies = 83
	Currencies_HTG Currencies = 84
	Currencies_MXN Currencies = 85
	Currencies_MZN Currencies = 86
	Currencies_MNT Currencies = 87
	Currencies_NIO Currencies = 88
	Currencies_SEK Currencies = 89
	Currencies_TWD Currencies = 90
	Currencies_PEN Currencies = 91
	Currencies_ALL Currencies = 92
	Currencies_BIH Currencies = 93
	Currencies_LAK Currencies = 94
	Currencies_MKD Currencies = 95
	Currencies_HKD Currencies = 96
	Currencies_DZD Currencies = 97
	Currencies_CZK Currencies = 98
	Currencies_VND Currencies = 99
	Currencies_BSD Currencies = 100
	Currencies_SCR Currencies = 101
	Currencies_KRW Currencies = 102
	Currencies_MYR Currencies = 103
	Currencies_MOP Currencies = 104
	Currencies_ISK Currencies = 105
	Currencies_QAR Currencies = 106
	Currencies_LYD Currencies = 107
	Currencies_HNL Currencies = 108
	Currencies_NAD Currencies = 109
	Currencies_BGN Currencies = 110
	Currencies_ARS Currencies = 111
	Currencies_TJS Currencies = 112
	Currencies_GYD Currencies = 113
	Currencies_MVR Currencies = 114
	Currencies_JOD Currencies = 115
	Currencies_PHP Currencies = 116
	Currencies_KES Currencies = 117
	Currencies_TZS Currencies = 118
	Currencies_AUD Currencies = 119
	Currencies_GHS Currencies = 120
	Currencies_BTC Currencies = 121
	Currencies_SVC Currencies = 122
	Currencies_XAF Currencies = 123
	Currencies_FJD Currencies = 124
	Currencies_STD Currencies = 125
	Currencies_RUB Currencies = 126
	Currencies_AED Currencies = 127
	Currencies_SRD Currencies = 128
	Currencies_JPY Currencies = 129
	Currencies_CRC Currencies = 130
	Currencies_TTD Currencies = 131
	Currencies_TRY Currencies = 132
	Currencies_LRD Currencies = 133
	Currencies_CVE Currencies = 134
	Currencies_GNF Currencies = 135
	Currencies_NGN Currencies = 136
	Currencies_SDG Currencies = 137
	Currencies_HRV Currencies = 138
	Currencies_JMD Currencies = 139
)

// Enum value maps for Currencies.
var (
	Currencies_name = map[int32]string{
		0:   "USD",
		1:   "ERN",
		2:   "BRL",
		3:   "AOA",
		4:   "NPR",
		5:   "MWK",
		6:   "SYP",
		7:   "MUR",
		8:   "SLL",
		9:   "SZL",
		10:  "SAR",
		11:  "PLN",
		12:  "KZT",
		13:  "AZN",
		14:  "URY",
		15:  "BIF",
		16:  "BYR",
		17:  "UZS",
		18:  "KHR",
		19:  "TMT",
		20:  "PAB",
		21:  "GEL",
		22:  "EUR",
		23:  "ILS",
		24:  "GTQ",
		25:  "SOS",
		26:  "ETH",
		27:  "DKK",
		28:  "RSD",
		29:  "LSL",
		30:  "AMD",
		31:  "XPF",
		32:  "GBP",
		33:  "SGD",
		34:  "MAD",
		35:  "BHD",
		36:  "BND",
		37:  "GMD",
		38:  "IRR",
		39:  "LBP",
		40:  "YER",
		41:  "DJF",
		42:  "OMR",
		43:  "DOP",
		44:  "ETB",
		45:  "CNY",
		46:  "INR",
		47:  "NOK",
		48:  "BDT",
		49:  "IDR",
		50:  "THB",
		51:  "EGP",
		52:  "CDF",
		53:  "UGX",
		54:  "AFN",
		55:  "MDL",
		56:  "PKR",
		57:  "HUF",
		58:  "UAH",
		59:  "LKR",
		60:  "LTC",
		61:  "SSP",
		62:  "PYG",
		63:  "MGA",
		64:  "RWF",
		65:  "KYD",
		66:  "CLP",
		67:  "RON",
		68:  "MMK",
		69:  "TND",
		70:  "XRP",
		71:  "ZAR",
		72:  "BOB",
		73:  "KGS",
		74:  "XOF",
		75:  "NZD",
		76:  "CHF",
		77:  "CAD",
		78:  "IQD",
		79:  "CUC",
		80:  "KMF",
		81:  "COP",
		82:  "BWP",
		83:  "PGK",
		84:  "HTG",
		85:  "MXN",
		86:  "MZN",
		87:  "MNT",
		88:  "NIO",
		89:  "SEK",
		90:  "TWD",
		91:  "PEN",
		92:  "ALL",
		93:  "BIH",
		94:  "LAK",
		95:  "MKD",
		96:  "HKD",
		97:  "DZD",
		98:  "CZK",
		99:  "VND",
		100: "BSD",
		101: "SCR",
		102: "KRW",
		103: "MYR",
		104: "MOP",
		105: "ISK",
		106: "QAR",
		107: "LYD",
		108: "HNL",
		109: "NAD",
		110: "BGN",
		111: "ARS",
		112: "TJS",
		113: "GYD",
		114: "MVR",
		115: "JOD",
		116: "PHP",
		117: "KES",
		118: "TZS",
		119: "AUD",
		120: "GHS",
		121: "BTC",
		122: "SVC",
		123: "XAF",
		124: "FJD",
		125: "STD",
		126: "RUB",
		127: "AED",
		128: "SRD",
		129: "JPY",
		130: "CRC",
		131: "TTD",
		132: "TRY",
		133: "LRD",
		134: "CVE",
		135: "GNF",
		136: "NGN",
		137: "SDG",
		138: "HRV",
		139: "JMD",
	}
	Currencies_value = map[string]int32{
		"USD": 0,
		"ERN": 1,
		"BRL": 2,
		"AOA": 3,
		"NPR": 4,
		"MWK": 5,
		"SYP": 6,
		"MUR": 7,
		"SLL": 8,
		"SZL": 9,
		"SAR": 10,
		"PLN": 11,
		"KZT": 12,
		"AZN": 13,
		"URY": 14,
		"BIF": 15,
		"BYR": 16,
		"UZS": 17,
		"KHR": 18,
		"TMT": 19,
		"PAB": 20,
		"GEL": 21,
		"EUR": 22,
		"ILS": 23,
		"GTQ": 24,
		"SOS": 25,
		"ETH": 26,
		"DKK": 27,
		"RSD": 28,
		"LSL": 29,
		"AMD": 30,
		"XPF": 31,
		"GBP": 32,
		"SGD": 33,
		"MAD": 34,
		"BHD": 35,
		"BND": 36,
		"GMD": 37,
		"IRR": 38,
		"LBP": 39,
		"YER": 40,
		"DJF": 41,
		"OMR": 42,
		"DOP": 43,
		"ETB": 44,
		"CNY": 45,
		"INR": 46,
		"NOK": 47,
		"BDT": 48,
		"IDR": 49,
		"THB": 50,
		"EGP": 51,
		"CDF": 52,
		"UGX": 53,
		"AFN": 54,
		"MDL": 55,
		"PKR": 56,
		"HUF": 57,
		"UAH": 58,
		"LKR": 59,
		"LTC": 60,
		"SSP": 61,
		"PYG": 62,
		"MGA": 63,
		"RWF": 64,
		"KYD": 65,
		"CLP": 66,
		"RON": 67,
		"MMK": 68,
		"TND": 69,
		"XRP": 70,
		"ZAR": 71,
		"BOB": 72,
		"KGS": 73,
		"XOF": 74,
		"NZD": 75,
		"CHF": 76,
		"CAD": 77,
		"IQD": 78,
		"CUC": 79,
		"KMF": 80,
		"COP": 81,
		"BWP": 82,
		"PGK": 83,
		"HTG": 84,
		"MXN": 85,
		"MZN": 86,
		"MNT": 87,
		"NIO": 88,
		"SEK": 89,
		"TWD": 90,
		"PEN": 91,
		"ALL": 92,
		"BIH": 93,
		"LAK": 94,
		"MKD": 95,
		"HKD": 96,
		"DZD": 97,
		"CZK": 98,
		"VND": 99,
		"BSD": 100,
		"SCR": 101,
		"KRW": 102,
		"MYR": 103,
		"MOP": 104,
		"ISK": 105,
		"QAR": 106,
		"LYD": 107,
		"HNL": 108,
		"NAD": 109,
		"BGN": 110,
		"ARS": 111,
		"TJS": 112,
		"GYD": 113,
		"MVR": 114,
		"JOD": 115,
		"PHP": 116,
		"KES": 117,
		"TZS": 118,
		"AUD": 119,
		"GHS": 120,
		"BTC": 121,
		"SVC": 122,
		"XAF": 123,
		"FJD": 124,
		"STD": 125,
		"RUB": 126,
		"AED": 127,
		"SRD": 128,
		"JPY": 129,
		"CRC": 130,
		"TTD": 131,
		"TRY": 132,
		"LRD": 133,
		"CVE": 134,
		"GNF": 135,
		"NGN": 136,
		"SDG": 137,
		"HRV": 138,
		"JMD": 139,
	}
)

func (x Currencies) Enum() *Currencies {
	p := new(Currencies)
	*p = x
	return p
}

func (x Currencies) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Currencies) Descriptor() protoreflect.EnumDescriptor {
	return file_currency_proto_enumTypes[0].Descriptor()
}

func (Currencies) Type() protoreflect.EnumType {
	return &file_currency_proto_enumTypes[0]
}

func (x Currencies) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Currencies.Descriptor instead.
func (Currencies) EnumDescriptor() ([]byte, []int) {
	return file_currency_proto_rawDescGZIP(), []int{0}
}

// RateRequest defines the request for a GetRate Call
type RateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base is the base currency code for the rate
	Base Currencies `protobuf:"varint,1,opt,name=Base,proto3,enum=Currencies" json:"Base,omitempty"`
	// Destination is the destination currency code for the rate
	Destination Currencies `protobuf:"varint,2,opt,name=Destination,proto3,enum=Currencies" json:"Destination,omitempty"`
}

func (x *RateRequest) Reset() {
	*x = RateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateRequest) ProtoMessage() {}

func (x *RateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_currency_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateRequest.ProtoReflect.Descriptor instead.
func (*RateRequest) Descriptor() ([]byte, []int) {
	return file_currency_proto_rawDescGZIP(), []int{0}
}

func (x *RateRequest) GetBase() Currencies {
	if x != nil {
		return x.Base
	}
	return Currencies_USD
}

func (x *RateRequest) GetDestination() Currencies {
	if x != nil {
		return x.Destination
	}
	return Currencies_USD
}

// RateResponse is the response from a GetRate call, it contains
// rate which is flowing point number and can be used to convert between the
// two currencies specified in the request
type RateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rate float64 `protobuf:"fixed64,1,opt,name=Rate,proto3" json:"Rate,omitempty"`
}

func (x *RateResponse) Reset() {
	*x = RateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_currency_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateResponse) ProtoMessage() {}

func (x *RateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_currency_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateResponse.ProtoReflect.Descriptor instead.
func (*RateResponse) Descriptor() ([]byte, []int) {
	return file_currency_proto_rawDescGZIP(), []int{1}
}

func (x *RateResponse) GetRate() float64 {
	if x != nil {
		return x.Rate
	}
	return 0
}

var File_currency_proto protoreflect.FileDescriptor

var file_currency_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x5d, 0x0a, 0x0b, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x04, 0x42, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x52, 0x04, 0x42, 0x61, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x22, 0x0a, 0x0c, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x52,
	0x61, 0x74, 0x65, 0x2a, 0x84, 0x0a, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x53, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x52, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x4f, 0x41, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x50, 0x52, 0x10, 0x04, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x57, 0x4b, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x59, 0x50, 0x10,
	0x06, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x55, 0x52, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4c,
	0x4c, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x5a, 0x4c, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x41, 0x52, 0x10, 0x0a, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4c, 0x4e, 0x10, 0x0b, 0x12, 0x07,
	0x0a, 0x03, 0x4b, 0x5a, 0x54, 0x10, 0x0c, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x5a, 0x4e, 0x10, 0x0d,
	0x12, 0x07, 0x0a, 0x03, 0x55, 0x52, 0x59, 0x10, 0x0e, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x46,
	0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x59, 0x52, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x55,
	0x5a, 0x53, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x48, 0x52, 0x10, 0x12, 0x12, 0x07, 0x0a,
	0x03, 0x54, 0x4d, 0x54, 0x10, 0x13, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x41, 0x42, 0x10, 0x14, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x45, 0x4c, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x55, 0x52, 0x10,
	0x16, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4c, 0x53, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x54,
	0x51, 0x10, 0x18, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4f, 0x53, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x54, 0x48, 0x10, 0x1a, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4b, 0x4b, 0x10, 0x1b, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x53, 0x44, 0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x53, 0x4c, 0x10, 0x1d,
	0x12, 0x07, 0x0a, 0x03, 0x41, 0x4d, 0x44, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x50, 0x46,
	0x10, 0x1f, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x42, 0x50, 0x10, 0x20, 0x12, 0x07, 0x0a, 0x03, 0x53,
	0x47, 0x44, 0x10, 0x21, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x44, 0x10, 0x22, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x48, 0x44, 0x10, 0x23, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4e, 0x44, 0x10, 0x24, 0x12,
	0x07, 0x0a, 0x03, 0x47, 0x4d, 0x44, 0x10, 0x25, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x52, 0x52, 0x10,
	0x26, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x42, 0x50, 0x10, 0x27, 0x12, 0x07, 0x0a, 0x03, 0x59, 0x45,
	0x52, 0x10, 0x28, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4a, 0x46, 0x10, 0x29, 0x12, 0x07, 0x0a, 0x03,
	0x4f, 0x4d, 0x52, 0x10, 0x2a, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4f, 0x50, 0x10, 0x2b, 0x12, 0x07,
	0x0a, 0x03, 0x45, 0x54, 0x42, 0x10, 0x2c, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4e, 0x59, 0x10, 0x2d,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x52, 0x10, 0x2e, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x4b,
	0x10, 0x2f, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x44, 0x54, 0x10, 0x30, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x44, 0x52, 0x10, 0x31, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x48, 0x42, 0x10, 0x32, 0x12, 0x07, 0x0a,
	0x03, 0x45, 0x47, 0x50, 0x10, 0x33, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x44, 0x46, 0x10, 0x34, 0x12,
	0x07, 0x0a, 0x03, 0x55, 0x47, 0x58, 0x10, 0x35, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x46, 0x4e, 0x10,
	0x36, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x44, 0x4c, 0x10, 0x37, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4b,
	0x52, 0x10, 0x38, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x55, 0x46, 0x10, 0x39, 0x12, 0x07, 0x0a, 0x03,
	0x55, 0x41, 0x48, 0x10, 0x3a, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4b, 0x52, 0x10, 0x3b, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x54, 0x43, 0x10, 0x3c, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x53, 0x50, 0x10, 0x3d,
	0x12, 0x07, 0x0a, 0x03, 0x50, 0x59, 0x47, 0x10, 0x3e, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x47, 0x41,
	0x10, 0x3f, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x57, 0x46, 0x10, 0x40, 0x12, 0x07, 0x0a, 0x03, 0x4b,
	0x59, 0x44, 0x10, 0x41, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x4c, 0x50, 0x10, 0x42, 0x12, 0x07, 0x0a,
	0x03, 0x52, 0x4f, 0x4e, 0x10, 0x43, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4d, 0x4b, 0x10, 0x44, 0x12,
	0x07, 0x0a, 0x03, 0x54, 0x4e, 0x44, 0x10, 0x45, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x52, 0x50, 0x10,
	0x46, 0x12, 0x07, 0x0a, 0x03, 0x5a, 0x41, 0x52, 0x10, 0x47, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x4f,
	0x42, 0x10, 0x48, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x47, 0x53, 0x10, 0x49, 0x12, 0x07, 0x0a, 0x03,
	0x58, 0x4f, 0x46, 0x10, 0x4a, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x5a, 0x44, 0x10, 0x4b, 0x12, 0x07,
	0x0a, 0x03, 0x43, 0x48, 0x46, 0x10, 0x4c, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x41, 0x44, 0x10, 0x4d,
	0x12, 0x07, 0x0a, 0x03, 0x49, 0x51, 0x44, 0x10, 0x4e, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x55, 0x43,
	0x10, 0x4f, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x4d, 0x46, 0x10, 0x50, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x4f, 0x50, 0x10, 0x51, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x57, 0x50, 0x10, 0x52, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x47, 0x4b, 0x10, 0x53, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x54, 0x47, 0x10, 0x54, 0x12,
	0x07, 0x0a, 0x03, 0x4d, 0x58, 0x4e, 0x10, 0x55, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x5a, 0x4e, 0x10,
	0x56, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4e, 0x54, 0x10, 0x57, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x49,
	0x4f, 0x10, 0x58, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45, 0x4b, 0x10, 0x59, 0x12, 0x07, 0x0a, 0x03,
	0x54, 0x57, 0x44, 0x10, 0x5a, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x45, 0x4e, 0x10, 0x5b, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x5c, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x48, 0x10, 0x5d,
	0x12, 0x07, 0x0a, 0x03, 0x4c, 0x41, 0x4b, 0x10, 0x5e, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4b, 0x44,
	0x10, 0x5f, 0x12, 0x07, 0x0a, 0x03, 0x48, 0x4b, 0x44, 0x10, 0x60, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x5a, 0x44, 0x10, 0x61, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x5a, 0x4b, 0x10, 0x62, 0x12, 0x07, 0x0a,
	0x03, 0x56, 0x4e, 0x44, 0x10, 0x63, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x44, 0x10, 0x64, 0x12,
	0x07, 0x0a, 0x03, 0x53, 0x43, 0x52, 0x10, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x52, 0x57, 0x10,
	0x66, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x59, 0x52, 0x10, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f,
	0x50, 0x10, 0x68, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x53, 0x4b, 0x10, 0x69, 0x12, 0x07, 0x0a, 0x03,
	0x51, 0x41, 0x52, 0x10, 0x6a, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x59, 0x44, 0x10, 0x6b, 0x12, 0x07,
	0x0a, 0x03, 0x48, 0x4e, 0x4c, 0x10, 0x6c, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x41, 0x44, 0x10, 0x6d,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x47, 0x4e, 0x10, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x52, 0x53,
	0x10, 0x6f, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x4a, 0x53, 0x10, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x47,
	0x59, 0x44, 0x10, 0x71, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x56, 0x52, 0x10, 0x72, 0x12, 0x07, 0x0a,
	0x03, 0x4a, 0x4f, 0x44, 0x10, 0x73, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x48, 0x50, 0x10, 0x74, 0x12,
	0x07, 0x0a, 0x03, 0x4b, 0x45, 0x53, 0x10, 0x75, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x5a, 0x53, 0x10,
	0x76, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x55, 0x44, 0x10, 0x77, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x48,
	0x53, 0x10, 0x78, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x54, 0x43, 0x10, 0x79, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x56, 0x43, 0x10, 0x7a, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x41, 0x46, 0x10, 0x7b, 0x12, 0x07,
	0x0a, 0x03, 0x46, 0x4a, 0x44, 0x10, 0x7c, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x54, 0x44, 0x10, 0x7d,
	0x12, 0x07, 0x0a, 0x03, 0x52, 0x55, 0x42, 0x10, 0x7e, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x45, 0x44,
	0x10, 0x7f, 0x12, 0x08, 0x0a, 0x03, 0x53, 0x52, 0x44, 0x10, 0x80, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x4a, 0x50, 0x59, 0x10, 0x81, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x43, 0x52, 0x43, 0x10, 0x82, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x54, 0x54, 0x44, 0x10, 0x83, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x54, 0x52,
	0x59, 0x10, 0x84, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4c, 0x52, 0x44, 0x10, 0x85, 0x01, 0x12, 0x08,
	0x0a, 0x03, 0x43, 0x56, 0x45, 0x10, 0x86, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x47, 0x4e, 0x46, 0x10,
	0x87, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x4e, 0x47, 0x4e, 0x10, 0x88, 0x01, 0x12, 0x08, 0x0a, 0x03,
	0x53, 0x44, 0x47, 0x10, 0x89, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x48, 0x52, 0x56, 0x10, 0x8a, 0x01,
	0x12, 0x08, 0x0a, 0x03, 0x4a, 0x4d, 0x44, 0x10, 0x8b, 0x01, 0x32, 0x32, 0x0a, 0x08, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x26, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x61, 0x74,
	0x65, 0x12, 0x0c, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0d, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0b,
	0x5a, 0x09, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_currency_proto_rawDescOnce sync.Once
	file_currency_proto_rawDescData = file_currency_proto_rawDesc
)

func file_currency_proto_rawDescGZIP() []byte {
	file_currency_proto_rawDescOnce.Do(func() {
		file_currency_proto_rawDescData = protoimpl.X.CompressGZIP(file_currency_proto_rawDescData)
	})
	return file_currency_proto_rawDescData
}

var file_currency_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_currency_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_currency_proto_goTypes = []interface{}{
	(Currencies)(0),      // 0: Currencies
	(*RateRequest)(nil),  // 1: RateRequest
	(*RateResponse)(nil), // 2: RateResponse
}
var file_currency_proto_depIdxs = []int32{
	0, // 0: RateRequest.Base:type_name -> Currencies
	0, // 1: RateRequest.Destination:type_name -> Currencies
	1, // 2: Currency.GetRate:input_type -> RateRequest
	2, // 3: Currency.GetRate:output_type -> RateResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_currency_proto_init() }
func file_currency_proto_init() {
	if File_currency_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_currency_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_currency_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_currency_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_currency_proto_goTypes,
		DependencyIndexes: file_currency_proto_depIdxs,
		EnumInfos:         file_currency_proto_enumTypes,
		MessageInfos:      file_currency_proto_msgTypes,
	}.Build()
	File_currency_proto = out.File
	file_currency_proto_rawDesc = nil
	file_currency_proto_goTypes = nil
	file_currency_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CurrencyClient is the client API for Currency service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CurrencyClient interface {
	// GetRate returns the exchange rate for the two provided currency codes
	GetRate(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error)
}

type currencyClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyClient(cc grpc.ClientConnInterface) CurrencyClient {
	return &currencyClient{cc}
}

func (c *currencyClient) GetRate(ctx context.Context, in *RateRequest, opts ...grpc.CallOption) (*RateResponse, error) {
	out := new(RateResponse)
	err := c.cc.Invoke(ctx, "/Currency/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyServer is the server API for Currency service.
type CurrencyServer interface {
	// GetRate returns the exchange rate for the two provided currency codes
	GetRate(context.Context, *RateRequest) (*RateResponse, error)
}

// UnimplementedCurrencyServer can be embedded to have forward compatible implementations.
type UnimplementedCurrencyServer struct {
}

func (*UnimplementedCurrencyServer) GetRate(context.Context, *RateRequest) (*RateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}

func RegisterCurrencyServer(s *grpc.Server, srv CurrencyServer) {
	s.RegisterService(&_Currency_serviceDesc, srv)
}

func _Currency_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Currency/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServer).GetRate(ctx, req.(*RateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Currency_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Currency",
	HandlerType: (*CurrencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRate",
			Handler:    _Currency_GetRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currency.proto",
}
